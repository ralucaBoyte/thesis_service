/*
 * This file is generated by jOOQ.
 */
package ro.ubbcluj.cs.ams.attendance.model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ro.ubbcluj.cs.ams.attendance.model.Keys;
import ro.ubbcluj.cs.ams.attendance.model.Public;
import ro.ubbcluj.cs.ams.attendance.model.tables.records.AttendanceRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attendance extends TableImpl<AttendanceRecord> {

    private static final long serialVersionUID = 1825159943;

    /**
     * The reference instance of <code>public.attendance</code>
     */
    public static final Attendance ATTENDANCE = new Attendance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttendanceRecord> getRecordType() {
        return AttendanceRecord.class;
    }

    /**
     * The column <code>public.attendance.id</code>.
     */
    public final TableField<AttendanceRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('attendance_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.attendance.student_id</code>.
     */
    public final TableField<AttendanceRecord, String> STUDENT_ID = createField(DSL.name("student_id"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.attendance.created_at</code>.
     */
    public final TableField<AttendanceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.attendance.attendance_info_id</code>.
     */
    public final TableField<AttendanceRecord, Integer> ATTENDANCE_INFO_ID = createField(DSL.name("attendance_info_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('attendance_attendance_info_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.attendance</code> table reference
     */
    public Attendance() {
        this(DSL.name("attendance"), null);
    }

    /**
     * Create an aliased <code>public.attendance</code> table reference
     */
    public Attendance(String alias) {
        this(DSL.name(alias), ATTENDANCE);
    }

    /**
     * Create an aliased <code>public.attendance</code> table reference
     */
    public Attendance(Name alias) {
        this(alias, ATTENDANCE);
    }

    private Attendance(Name alias, Table<AttendanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attendance(Name alias, Table<AttendanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Attendance(Table<O> child, ForeignKey<O, AttendanceRecord> key) {
        super(child, key, ATTENDANCE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<AttendanceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ATTENDANCE;
    }

    @Override
    public UniqueKey<AttendanceRecord> getPrimaryKey() {
        return Keys.PK_ATTENDANCE;
    }

    @Override
    public List<UniqueKey<AttendanceRecord>> getKeys() {
        return Arrays.<UniqueKey<AttendanceRecord>>asList(Keys.PK_ATTENDANCE);
    }

    @Override
    public List<ForeignKey<AttendanceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AttendanceRecord, ?>>asList(Keys.ATTENDANCE__FK_ATTENDANCE_INFO);
    }

    public AttendanceInfo attendanceInfo() {
        return new AttendanceInfo(this, Keys.ATTENDANCE__FK_ATTENDANCE_INFO);
    }

    @Override
    public Attendance as(String alias) {
        return new Attendance(DSL.name(alias), this);
    }

    @Override
    public Attendance as(Name alias) {
        return new Attendance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attendance rename(String name) {
        return new Attendance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attendance rename(Name name) {
        return new Attendance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
