/*
 * This file is generated by jOOQ.
 */
package ro.ubbcluj.cs.ams.subject.chat.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ro.ubbcluj.cs.ams.subject.chat.Keys;
import ro.ubbcluj.cs.ams.subject.chat.Public;
import ro.ubbcluj.cs.ams.subject.chat.tables.records.ChatMessageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChatMessage extends TableImpl<ChatMessageRecord> {

    private static final long serialVersionUID = -1440323457;

    /**
     * The reference instance of <code>public.chat_message</code>
     */
    public static final ChatMessage CHAT_MESSAGE = new ChatMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatMessageRecord> getRecordType() {
        return ChatMessageRecord.class;
    }

    /**
     * The column <code>public.chat_message.id</code>.
     */
    public final TableField<ChatMessageRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('chat_message_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.chat_message.sender</code>.
     */
    public final TableField<ChatMessageRecord, String> SENDER = createField(DSL.name("sender"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.chat_message.receiver</code>.
     */
    public final TableField<ChatMessageRecord, String> RECEIVER = createField(DSL.name("receiver"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.chat_message.content</code>.
     */
    public final TableField<ChatMessageRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.chat_message.conversation_id</code>.
     */
    public final TableField<ChatMessageRecord, Integer> CONVERSATION_ID = createField(DSL.name("conversation_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('chat_message_conversation_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.chat_message</code> table reference
     */
    public ChatMessage() {
        this(DSL.name("chat_message"), null);
    }

    /**
     * Create an aliased <code>public.chat_message</code> table reference
     */
    public ChatMessage(String alias) {
        this(DSL.name(alias), CHAT_MESSAGE);
    }

    /**
     * Create an aliased <code>public.chat_message</code> table reference
     */
    public ChatMessage(Name alias) {
        this(alias, CHAT_MESSAGE);
    }

    private ChatMessage(Name alias, Table<ChatMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChatMessage(Name alias, Table<ChatMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ChatMessage(Table<O> child, ForeignKey<O, ChatMessageRecord> key) {
        super(child, key, CHAT_MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ChatMessageRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CHAT_MESSAGE;
    }

    @Override
    public UniqueKey<ChatMessageRecord> getPrimaryKey() {
        return Keys.PK_CHAT_MESSAGE;
    }

    @Override
    public List<UniqueKey<ChatMessageRecord>> getKeys() {
        return Arrays.<UniqueKey<ChatMessageRecord>>asList(Keys.PK_CHAT_MESSAGE);
    }

    @Override
    public List<ForeignKey<ChatMessageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ChatMessageRecord, ?>>asList(Keys.CHAT_MESSAGE__FK1_USER1, Keys.CHAT_MESSAGE__FK1_USER2, Keys.CHAT_MESSAGE__FK_CHAT_MESSAGE_CONVERSATION);
    }

    public ChatUser fk1User1() {
        return new ChatUser(this, Keys.CHAT_MESSAGE__FK1_USER1);
    }

    public ChatUser fk1User2() {
        return new ChatUser(this, Keys.CHAT_MESSAGE__FK1_USER2);
    }

    public Conversation conversation() {
        return new Conversation(this, Keys.CHAT_MESSAGE__FK_CHAT_MESSAGE_CONVERSATION);
    }

    @Override
    public ChatMessage as(String alias) {
        return new ChatMessage(DSL.name(alias), this);
    }

    @Override
    public ChatMessage as(Name alias) {
        return new ChatMessage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatMessage rename(String name) {
        return new ChatMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatMessage rename(Name name) {
        return new ChatMessage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
