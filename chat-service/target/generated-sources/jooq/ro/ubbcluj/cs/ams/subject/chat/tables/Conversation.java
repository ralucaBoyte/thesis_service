/*
 * This file is generated by jOOQ.
 */
package ro.ubbcluj.cs.ams.subject.chat.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ro.ubbcluj.cs.ams.subject.chat.Keys;
import ro.ubbcluj.cs.ams.subject.chat.Public;
import ro.ubbcluj.cs.ams.subject.chat.tables.records.ConversationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Conversation extends TableImpl<ConversationRecord> {

    private static final long serialVersionUID = -213376062;

    /**
     * The reference instance of <code>public.conversation</code>
     */
    public static final Conversation CONVERSATION = new Conversation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConversationRecord> getRecordType() {
        return ConversationRecord.class;
    }

    /**
     * The column <code>public.conversation.id</code>.
     */
    public final TableField<ConversationRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('conversation_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.conversation.username1</code>.
     */
    public final TableField<ConversationRecord, String> USERNAME1 = createField(DSL.name("username1"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.conversation.username2</code>.
     */
    public final TableField<ConversationRecord, String> USERNAME2 = createField(DSL.name("username2"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>public.conversation</code> table reference
     */
    public Conversation() {
        this(DSL.name("conversation"), null);
    }

    /**
     * Create an aliased <code>public.conversation</code> table reference
     */
    public Conversation(String alias) {
        this(DSL.name(alias), CONVERSATION);
    }

    /**
     * Create an aliased <code>public.conversation</code> table reference
     */
    public Conversation(Name alias) {
        this(alias, CONVERSATION);
    }

    private Conversation(Name alias, Table<ConversationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conversation(Name alias, Table<ConversationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Conversation(Table<O> child, ForeignKey<O, ConversationRecord> key) {
        super(child, key, CONVERSATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ConversationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONVERSATION;
    }

    @Override
    public UniqueKey<ConversationRecord> getPrimaryKey() {
        return Keys.PK_CONVERSATION;
    }

    @Override
    public List<UniqueKey<ConversationRecord>> getKeys() {
        return Arrays.<UniqueKey<ConversationRecord>>asList(Keys.PK_CONVERSATION);
    }

    @Override
    public List<ForeignKey<ConversationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ConversationRecord, ?>>asList(Keys.CONVERSATION__FK1_CONVERSATION, Keys.CONVERSATION__FK2_CONVERSATION);
    }

    public ChatUser fk1Conversation() {
        return new ChatUser(this, Keys.CONVERSATION__FK1_CONVERSATION);
    }

    public ChatUser fk2Conversation() {
        return new ChatUser(this, Keys.CONVERSATION__FK2_CONVERSATION);
    }

    @Override
    public Conversation as(String alias) {
        return new Conversation(DSL.name(alias), this);
    }

    @Override
    public Conversation as(Name alias) {
        return new Conversation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversation rename(String name) {
        return new Conversation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversation rename(Name name) {
        return new Conversation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
