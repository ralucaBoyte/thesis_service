/*
 * This file is generated by jOOQ.
 */
package ro.ubbcluj.cs.ams.auth.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ro.ubbcluj.cs.ams.auth.model.Keys;
import ro.ubbcluj.cs.ams.auth.model.Public;
import ro.ubbcluj.cs.ams.auth.model.tables.records.OauthUserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthUser extends TableImpl<OauthUserRecord> {

    private static final long serialVersionUID = 264075693;

    /**
     * The reference instance of <code>public.oauth_user</code>
     */
    public static final OauthUser OAUTH_USER = new OauthUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthUserRecord> getRecordType() {
        return OauthUserRecord.class;
    }

    /**
     * The column <code>public.oauth_user.id</code>.
     */
    public final TableField<OauthUserRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('oauth_user_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.oauth_user.username</code>.
     */
    public final TableField<OauthUserRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.oauth_user.password</code>.
     */
    public final TableField<OauthUserRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.oauth_user.email</code>.
     */
    public final TableField<OauthUserRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.oauth_user.enabled</code>.
     */
    public final TableField<OauthUserRecord, Short> ENABLED = createField(DSL.name("enabled"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.oauth_user.account_non_expired</code>.
     */
    public final TableField<OauthUserRecord, Short> ACCOUNT_NON_EXPIRED = createField(DSL.name("account_non_expired"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.oauth_user.credentials_non_expired</code>.
     */
    public final TableField<OauthUserRecord, Short> CREDENTIALS_NON_EXPIRED = createField(DSL.name("credentials_non_expired"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.oauth_user.account_non_locked</code>.
     */
    public final TableField<OauthUserRecord, Short> ACCOUNT_NON_LOCKED = createField(DSL.name("account_non_locked"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>public.oauth_user</code> table reference
     */
    public OauthUser() {
        this(DSL.name("oauth_user"), null);
    }

    /**
     * Create an aliased <code>public.oauth_user</code> table reference
     */
    public OauthUser(String alias) {
        this(DSL.name(alias), OAUTH_USER);
    }

    /**
     * Create an aliased <code>public.oauth_user</code> table reference
     */
    public OauthUser(Name alias) {
        this(alias, OAUTH_USER);
    }

    private OauthUser(Name alias, Table<OauthUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthUser(Name alias, Table<OauthUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OauthUser(Table<O> child, ForeignKey<O, OauthUserRecord> key) {
        super(child, key, OAUTH_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<OauthUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OAUTH_USER;
    }

    @Override
    public UniqueKey<OauthUserRecord> getPrimaryKey() {
        return Keys.PK_USER;
    }

    @Override
    public List<UniqueKey<OauthUserRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthUserRecord>>asList(Keys.PK_USER, Keys.UK_USER);
    }

    @Override
    public OauthUser as(String alias) {
        return new OauthUser(DSL.name(alias), this);
    }

    @Override
    public OauthUser as(Name alias) {
        return new OauthUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthUser rename(String name) {
        return new OauthUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthUser rename(Name name) {
        return new OauthUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, Short, Short, Short, Short> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
