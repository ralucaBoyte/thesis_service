/*
 * This file is generated by jOOQ.
 */
package ro.ubbcluj.cs.ams.auth.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ro.ubbcluj.cs.ams.auth.model.Keys;
import ro.ubbcluj.cs.ams.auth.model.Public;
import ro.ubbcluj.cs.ams.auth.model.tables.records.UserKeyphraseRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserKeyphrase extends TableImpl<UserKeyphraseRecord> {

    private static final long serialVersionUID = -154734965;

    /**
     * The reference instance of <code>public.user_keyphrase</code>
     */
    public static final UserKeyphrase USER_KEYPHRASE = new UserKeyphrase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserKeyphraseRecord> getRecordType() {
        return UserKeyphraseRecord.class;
    }

    /**
     * The column <code>public.user_keyphrase.id</code>.
     */
    public final TableField<UserKeyphraseRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('user_keyphrase_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.user_keyphrase.username</code>.
     */
    public final TableField<UserKeyphraseRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.user_keyphrase.keyphrase</code>.
     */
    public final TableField<UserKeyphraseRecord, String> KEYPHRASE = createField(DSL.name("keyphrase"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.user_keyphrase.message</code>.
     */
    public final TableField<UserKeyphraseRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * Create a <code>public.user_keyphrase</code> table reference
     */
    public UserKeyphrase() {
        this(DSL.name("user_keyphrase"), null);
    }

    /**
     * Create an aliased <code>public.user_keyphrase</code> table reference
     */
    public UserKeyphrase(String alias) {
        this(DSL.name(alias), USER_KEYPHRASE);
    }

    /**
     * Create an aliased <code>public.user_keyphrase</code> table reference
     */
    public UserKeyphrase(Name alias) {
        this(alias, USER_KEYPHRASE);
    }

    private UserKeyphrase(Name alias, Table<UserKeyphraseRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserKeyphrase(Name alias, Table<UserKeyphraseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserKeyphrase(Table<O> child, ForeignKey<O, UserKeyphraseRecord> key) {
        super(child, key, USER_KEYPHRASE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UserKeyphraseRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_KEYPHRASE;
    }

    @Override
    public UniqueKey<UserKeyphraseRecord> getPrimaryKey() {
        return Keys.PK_USER_KEYPHRASE;
    }

    @Override
    public List<UniqueKey<UserKeyphraseRecord>> getKeys() {
        return Arrays.<UniqueKey<UserKeyphraseRecord>>asList(Keys.PK_USER_KEYPHRASE, Keys.PK_USER_UNIQUES);
    }

    @Override
    public List<ForeignKey<UserKeyphraseRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserKeyphraseRecord, ?>>asList(Keys.USER_KEYPHRASE__FK_USERNAME);
    }

    public OauthUser oauthUser() {
        return new OauthUser(this, Keys.USER_KEYPHRASE__FK_USERNAME);
    }

    @Override
    public UserKeyphrase as(String alias) {
        return new UserKeyphrase(DSL.name(alias), this);
    }

    @Override
    public UserKeyphrase as(Name alias) {
        return new UserKeyphrase(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserKeyphrase rename(String name) {
        return new UserKeyphrase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserKeyphrase rename(Name name) {
        return new UserKeyphrase(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
