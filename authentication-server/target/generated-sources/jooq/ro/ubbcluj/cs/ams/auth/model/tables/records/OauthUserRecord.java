/*
 * This file is generated by jOOQ.
 */
package ro.ubbcluj.cs.ams.auth.model.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import ro.ubbcluj.cs.ams.auth.model.tables.OauthUser;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthUserRecord extends UpdatableRecordImpl<OauthUserRecord> implements Record8<Integer, String, String, String, Short, Short, Short, Short> {

    private static final long serialVersionUID = 18843218;

    /**
     * Setter for <code>public.oauth_user.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.oauth_user.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.oauth_user.username</code>.
     */
    public void setUsername(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.oauth_user.username</code>.
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.oauth_user.password</code>.
     */
    public void setPassword(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.oauth_user.password</code>.
     */
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.oauth_user.email</code>.
     */
    public void setEmail(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.oauth_user.email</code>.
     */
    public String getEmail() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.oauth_user.enabled</code>.
     */
    public void setEnabled(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.oauth_user.enabled</code>.
     */
    public Short getEnabled() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>public.oauth_user.account_non_expired</code>.
     */
    public void setAccountNonExpired(Short value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.oauth_user.account_non_expired</code>.
     */
    public Short getAccountNonExpired() {
        return (Short) get(5);
    }

    /**
     * Setter for <code>public.oauth_user.credentials_non_expired</code>.
     */
    public void setCredentialsNonExpired(Short value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.oauth_user.credentials_non_expired</code>.
     */
    public Short getCredentialsNonExpired() {
        return (Short) get(6);
    }

    /**
     * Setter for <code>public.oauth_user.account_non_locked</code>.
     */
    public void setAccountNonLocked(Short value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.oauth_user.account_non_locked</code>.
     */
    public Short getAccountNonLocked() {
        return (Short) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, Short, Short, Short, Short> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, String, String, Short, Short, Short, Short> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return OauthUser.OAUTH_USER.ID;
    }

    @Override
    public Field<String> field2() {
        return OauthUser.OAUTH_USER.USERNAME;
    }

    @Override
    public Field<String> field3() {
        return OauthUser.OAUTH_USER.PASSWORD;
    }

    @Override
    public Field<String> field4() {
        return OauthUser.OAUTH_USER.EMAIL;
    }

    @Override
    public Field<Short> field5() {
        return OauthUser.OAUTH_USER.ENABLED;
    }

    @Override
    public Field<Short> field6() {
        return OauthUser.OAUTH_USER.ACCOUNT_NON_EXPIRED;
    }

    @Override
    public Field<Short> field7() {
        return OauthUser.OAUTH_USER.CREDENTIALS_NON_EXPIRED;
    }

    @Override
    public Field<Short> field8() {
        return OauthUser.OAUTH_USER.ACCOUNT_NON_LOCKED;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUsername();
    }

    @Override
    public String component3() {
        return getPassword();
    }

    @Override
    public String component4() {
        return getEmail();
    }

    @Override
    public Short component5() {
        return getEnabled();
    }

    @Override
    public Short component6() {
        return getAccountNonExpired();
    }

    @Override
    public Short component7() {
        return getCredentialsNonExpired();
    }

    @Override
    public Short component8() {
        return getAccountNonLocked();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUsername();
    }

    @Override
    public String value3() {
        return getPassword();
    }

    @Override
    public String value4() {
        return getEmail();
    }

    @Override
    public Short value5() {
        return getEnabled();
    }

    @Override
    public Short value6() {
        return getAccountNonExpired();
    }

    @Override
    public Short value7() {
        return getCredentialsNonExpired();
    }

    @Override
    public Short value8() {
        return getAccountNonLocked();
    }

    @Override
    public OauthUserRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public OauthUserRecord value2(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public OauthUserRecord value3(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public OauthUserRecord value4(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public OauthUserRecord value5(Short value) {
        setEnabled(value);
        return this;
    }

    @Override
    public OauthUserRecord value6(Short value) {
        setAccountNonExpired(value);
        return this;
    }

    @Override
    public OauthUserRecord value7(Short value) {
        setCredentialsNonExpired(value);
        return this;
    }

    @Override
    public OauthUserRecord value8(Short value) {
        setAccountNonLocked(value);
        return this;
    }

    @Override
    public OauthUserRecord values(Integer value1, String value2, String value3, String value4, Short value5, Short value6, Short value7, Short value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OauthUserRecord
     */
    public OauthUserRecord() {
        super(OauthUser.OAUTH_USER);
    }

    /**
     * Create a detached, initialised OauthUserRecord
     */
    public OauthUserRecord(Integer id, String username, String password, String email, Short enabled, Short accountNonExpired, Short credentialsNonExpired, Short accountNonLocked) {
        super(OauthUser.OAUTH_USER);

        set(0, id);
        set(1, username);
        set(2, password);
        set(3, email);
        set(4, enabled);
        set(5, accountNonExpired);
        set(6, credentialsNonExpired);
        set(7, accountNonLocked);
    }
}
