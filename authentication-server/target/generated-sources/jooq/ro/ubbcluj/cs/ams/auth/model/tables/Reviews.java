/*
 * This file is generated by jOOQ.
 */
package ro.ubbcluj.cs.ams.auth.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ro.ubbcluj.cs.ams.auth.model.Keys;
import ro.ubbcluj.cs.ams.auth.model.Public;
import ro.ubbcluj.cs.ams.auth.model.tables.records.ReviewsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reviews extends TableImpl<ReviewsRecord> {

    private static final long serialVersionUID = 1011263491;

    /**
     * The reference instance of <code>public.reviews</code>
     */
    public static final Reviews REVIEWS = new Reviews();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReviewsRecord> getRecordType() {
        return ReviewsRecord.class;
    }

    /**
     * The column <code>public.reviews.id</code>.
     */
    public final TableField<ReviewsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('reviews_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.reviews.professor</code>.
     */
    public final TableField<ReviewsRecord, String> PROFESSOR = createField(DSL.name("professor"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.reviews.student</code>.
     */
    public final TableField<ReviewsRecord, String> STUDENT = createField(DSL.name("student"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.reviews.feedback</code>.
     */
    public final TableField<ReviewsRecord, String> FEEDBACK = createField(DSL.name("feedback"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.reviews.review_grade</code>.
     */
    public final TableField<ReviewsRecord, Float> REVIEW_GRADE = createField(DSL.name("review_grade"), org.jooq.impl.SQLDataType.REAL, this, "");

    /**
     * Create a <code>public.reviews</code> table reference
     */
    public Reviews() {
        this(DSL.name("reviews"), null);
    }

    /**
     * Create an aliased <code>public.reviews</code> table reference
     */
    public Reviews(String alias) {
        this(DSL.name(alias), REVIEWS);
    }

    /**
     * Create an aliased <code>public.reviews</code> table reference
     */
    public Reviews(Name alias) {
        this(alias, REVIEWS);
    }

    private Reviews(Name alias, Table<ReviewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reviews(Name alias, Table<ReviewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Reviews(Table<O> child, ForeignKey<O, ReviewsRecord> key) {
        super(child, key, REVIEWS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ReviewsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REVIEWS;
    }

    @Override
    public UniqueKey<ReviewsRecord> getPrimaryKey() {
        return Keys.PK_REVIEWS;
    }

    @Override
    public List<UniqueKey<ReviewsRecord>> getKeys() {
        return Arrays.<UniqueKey<ReviewsRecord>>asList(Keys.PK_REVIEWS);
    }

    @Override
    public List<ForeignKey<ReviewsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReviewsRecord, ?>>asList(Keys.REVIEWS__FK1_REVIEW_PROFESSOR, Keys.REVIEWS__FK1_REVIEW_STUDENT);
    }

    public OauthUser fk1ReviewProfessor() {
        return new OauthUser(this, Keys.REVIEWS__FK1_REVIEW_PROFESSOR);
    }

    public OauthUser fk1ReviewStudent() {
        return new OauthUser(this, Keys.REVIEWS__FK1_REVIEW_STUDENT);
    }

    @Override
    public Reviews as(String alias) {
        return new Reviews(DSL.name(alias), this);
    }

    @Override
    public Reviews as(Name alias) {
        return new Reviews(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviews rename(String name) {
        return new Reviews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviews rename(Name name) {
        return new Reviews(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, Float> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
